##Introduction
The analysis was conducted on the RData file Breast_invasive_carcinoma, which contains the following three data frames:

raw_counts_df: contains raw RNA-seq counts;
c_year_df: contains sample names and conditions (case or control);
r_year_df: contains ENSEMBL gene IDs, lengths, and gene symbols.
Task 1
# Load the RData file
load("C:/Users/virgi/Desktop/Breast_invasive_carcinoma.RData")
Task 2
The first step was to update raw_count_df and r_anno_df by extracting only the coding genes. This process required connecting to the Ensembl database. The getBM function from the biomaRt package was used to perform the query, specifying the attributes and providing the values from r_anno_df.

The results were then filtered to retain only protein-coding genes. Finally, raw_count_df and r_anno_df were filtered to include only the rows corresponding to these genes. The dimensions of both datasets were checked to confirm the filtering.

library(biomaRt)
library(tidyverse)

# Connect to Ensembl
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")

# Perform the query
query1 <- getBM(attributes = c("ensembl_gene_id", "external_gene_name", "gene_biotype", "start_position", "end_position", "chromosome_name", "strand", "description", "version"),
                filters = c("ensembl_gene_id"), 
                values = list(r_anno_df$ensembl_gene_id),
                mart = ensembl)

# Filter for protein-coding genes
query1_protein_coding <- query1[which(query1$gene_biotype == "protein_coding"),]

# Filter the data
raw_counts_df_filt <- raw_counts_df[which(rownames(raw_counts_df) %in% query1_protein_coding$ensembl_gene_id),]
r_anno_df_filt <- subset(r_anno_df, ensembl_gene_id %in% query1_protein_coding$ensembl_gene_id)

# Check the dimensions
dim(raw_counts_df)
dim(r_anno_df)
dim(raw_counts_df_filt)
dim(r_anno_df_filt)
The results on the dimensions confirm that the filtering process was applied consistently across both data frames.

Task 3 - Differential Expression Analysis
Differential expression analysis was performed using the edgeR package. Initially, the raw count data were filtered to retain only genes with a raw count >20 in at least 5 cases or 5 control samples. Then, a DGElist was created, and the analysis selected up- and down-regulated genes using an adjusted p-value cutoff of 0.01, a log fold change ratio >1.5 for up-regulated genes and < -1.5 for down-regulated genes, and a log CPM >1.

count_thr <- 20
repl_thr <- 5

# Filter the datasets
filter_vec <- apply(raw_counts_df_filt, 1, function(y) max(by(y, c_anno_df$condition, function(x) sum(x > count_thr))))

# Filter counts
filter_counts_df <- raw_counts_df_filt[filter_vec >= repl_thr,]
dim(filter_counts_df) 

# Apply the filter on gene annotation
filter_anno_df <- r_anno_df_filt[rownames(filter_counts_df),]

# DEG analysis with edgeR
library(edgeR)
edge_c <- DGEList(counts = filter_counts_df, 
               group = c_anno_df$condition, 
               samples = c_anno_df,
               genes = filter_anno_df)

# Normalize the data
edge_n <- calcNormFactors(edge_c)
cpm_table <- as.data.frame(round(cpm(edge_n), 2))

# Create the experimental design matrix
design <- model.matrix(~ 0 + group, data = edge_n$samples)
colnames(design) <- levels(edge_n$samples$group)
rownames(design) <- edge_n$samples$sample

# Fit the model with generalized linear models
edge_d <- estimateDisp(edge_n, design)
edge_f <- glmQLFit(edge_d, design) 

# Define the contrast
contro <- makeContrasts("case-control", levels = design)

# Perform the test
edge_t <- glmQLFTest(edge_f, contrast = contro)
DEGs <- as.data.frame(topTags(edge_t, n = 20000, p.value = 0.01, sort.by = "logFC"))

# Classify up/down-regulated genes
DEGs$class <- "="
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC > 1.5)] = "+"
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC < (-1.5))] = '-'
DEGs <- DEGs[order(DEGs$logFC, decreasing = T),]
table(DEGs$class)
The number of up-regulated (915) and down-regulated (903) genes is fairly balanced, indicating that similar numbers of genes are activated and repressed under the experimental conditions.

The Volcano Plot
# Volcano plot visualization
input_df <- DEGs
xlabel <- "log2 FC control vs tumor"
ylabel <- "-log10 p-value"
par(fig = c(0,1,0,1), mar = c(4,4,1,2), mgp = c(2, 0.75, 0))	
plot(input_df$logFC, -log(input_df$PValue, base = 10), xlab = xlabel, ylab = ylabel, 
     col = ifelse(input_df$class == "=", "grey70", ifelse(DEGs$class == "+", "#DF536B", "olivedrab4")),
     pch = 20, frame.plot = TRUE, cex = 0.8, main = "Volcano plot")
abline(v = 0, lty = 2, col = "grey20")
The Heatmap
# Heatmap visualization
col <- rep('chartreuse4', nrow(c_anno_df))
col[which(c_anno_df$condition == 'case')] <- 'burlywood3'

pal <- colorRampPalette(c('blue', 'white', 'red'))(100)

# Subset and scale the data
subset_cpm <- as.matrix(cpm_table[which(rownames(cpm_table) %in% DEGs$ensembl_gene_id[which(DEGs$class != '=')]),])
scaled_subset_cpm <- t(scale(t(subset_cpm)))

# Generate a heatmap
heatmap(scaled_subset_cpm,
        ColSideColors = col,
        col = pal,
        margins = c(4, 4),
        cexCol = 0.5,
        cexRow = 0.2,
        main = "Heatmap")
Task 4 - Gene Set Enrichment Analysis
The biomaRt package was again used to annotate the genes in DEGs with information from the Ensembl database. Gene set enrichment analysis was conducted, focusing on the Biological Process.

library(org.Hs.eg.db)
library(clusterProfiler)

# Perform Gene Ontology enrichment analysis for up-regulated genes
up_ego_BP <- enrichGO(gene = up_DEGs$external_gene_name.x,
                   OrgDb = org.Hs.eg.db,
                   keyType = 'SYMBOL',
                   ont = "BP",
                   pAdjustMethod = "BH",
                   pvalueCutoff = 0.05,
                   qvalueCutoff = 0.05)

# Perform Gene Ontology enrichment analysis for down-regulated genes
down_ego_BP <- enrichGO(gene = down_DEGs$external_gene_name.x,
                   OrgDb = org.Hs.eg.db,
                   keyType = 'SYMBOL',
                   ont = "BP",
                   pAdjustMethod = "BH",
                   pvalueCutoff = 0.05,
                   qvalueCutoff = 0.05)

# Visualization
barplot(up_ego_BP, showCategory = 10)
dotplot(up_ego_BP, showCategory = 10)
heatplot(up_ego_BP, showCategory = 6)

barplot(down_ego_BP, showCategory = 10)
dotplot(down_ego_BP, showCategory = 10)
heatplot(down_ego_BP, showCategory = 6)
This helps visualize the functional roles of differentially expressed genes by identifying enriched Gene Ontology terms related to their biological processes.
